{"ast":null,"code":"import _regeneratorRuntime from \"/home/ubuntu/projects/dashboard-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ubuntu/projects/dashboard-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React, { useEffect } from 'react'; // import PropTypes from 'prop-types';\n\nimport { strapi } from \"../../axios\";\nexport var getLogByGq = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(key, _ref) {\n    var date, id, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            date = _ref.date, id = _ref.id;\n            _context.next = 3;\n            return strapi.request(\"POST\", \"/graphql\", {\n              data: {\n                query: \"\\n            query {\\n                logs{\\n                  position,\\n                  head,\\n                  count_ls,\\n                  start,\\n                  end,\\n                  command{\\n                    name,\\n                    id\\n                  },\\n                }\\n              }\\n                       \\n            \"\n              }\n            });\n\n          case 3:\n            data = _context.sent;\n            return _context.abrupt(\"return\", data.data);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getLogByGq(_x, _x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getLogsByGq = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(key, _ref3) {\n    var date, id, query, data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            date = _ref3.date, id = _ref3.id;\n            query = \"\\n  query {\\n      logs (where: { start_lte: \\\"\".concat(date, \"\\\", end_gte: \\\"\").concat(date, \"\\\", command:{ id_gt : \", 0, \" }}, sort:\\\"id:asc\\\"){\\n        id,\\n        position,\\n        head,\\n        count_ls,\\n        start,\\n        end,\\n        command{\\n          name,\\n          id\\n        },\\n      }\\n    }\\n             \\n  \");\n            _context2.next = 4;\n            return strapi.request(\"POST\", \"/graphql\", {\n              data: {\n                query: query\n              }\n            });\n\n          case 4:\n            data = _context2.sent;\n            return _context2.abrupt(\"return\", data.data);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getLogsByGq(_x3, _x4) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var getAllLogsByGq = /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(key, _ref5) {\n    var date, id, query, data;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            date = _ref5.date, id = _ref5.id;\n            query = \"\\n  query {\\n      logs{\\n        id,\\n        position,\\n        head,\\n        count_ls,\\n        start,\\n        end,\\n        command{\\n          name,\\n          id\\n        },\\n      }\\n    }\\n             \\n  \";\n            _context3.next = 4;\n            return strapi.request(\"POST\", \"/graphql\", {\n              data: {\n                query: query\n              }\n            });\n\n          case 4:\n            data = _context3.sent;\n            return _context3.abrupt(\"return\", data.data);\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function getAllLogsByGq(_x5, _x6) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var createLog = /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(formData) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return strapi.createEntry('logs', formData);\n\n          case 2:\n            data = _context4.sent;\n            return _context4.abrupt(\"return\", data);\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function createLog(_x7) {\n    return _ref7.apply(this, arguments);\n  };\n}();\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(getLogByGq, \"getLogByGq\", \"/home/ubuntu/projects/dashboard-template/src/features/orer/query.js\");\n  reactHotLoader.register(getLogsByGq, \"getLogsByGq\", \"/home/ubuntu/projects/dashboard-template/src/features/orer/query.js\");\n  reactHotLoader.register(getAllLogsByGq, \"getAllLogsByGq\", \"/home/ubuntu/projects/dashboard-template/src/features/orer/query.js\");\n  reactHotLoader.register(createLog, \"createLog\", \"/home/ubuntu/projects/dashboard-template/src/features/orer/query.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/ubuntu/projects/dashboard-template/src/features/orer/query.js"],"names":["React","useEffect","strapi","getLogByGq","key","date","id","request","data","query","getLogsByGq","getAllLogsByGq","createLog","formData","createEntry"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,SAASC,MAAT,QAAuB,aAAvB;AAEA,OAAO,IAAMC,UAAU;AAAA,uEAAG,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAcC,YAAAA,IAAd,QAAcA,IAAd,EAAoBC,EAApB,QAAoBA,EAApB;AAAA;AAAA,mBACLJ,MAAM,CAACK,OAAP,CAAe,MAAf,EAAuB,UAAvB,EAAmC;AACpDC,cAAAA,IAAI,EAAE;AACJC,gBAAAA,KAAK;AADD;AAD8C,aAAnC,CADK;;AAAA;AAClBD,YAAAA,IADkB;AAAA,6CAoBjBA,IAAI,CAACA,IApBY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVL,UAAU;AAAA;AAAA;AAAA,GAAhB;AAsBP,OAAO,IAAMO,WAAW;AAAA,uEAAG,kBAAON,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAcC,YAAAA,IAAd,SAAcA,IAAd,EAAoBC,EAApB,SAAoBA,EAApB;AACnBG,YAAAA,KADmB,4DAGQJ,IAHR,4BAG4BA,IAH5B,4BAGwD,CAHxD;AAAA;AAAA,mBAkBNH,MAAM,CAACK,OAAP,CAAe,MAAf,EAAuB,UAAvB,EAAmC;AACpDC,cAAAA,IAAI,EAAE;AACJC,gBAAAA,KAAK,EAAEA;AADH;AAD8C,aAAnC,CAlBM;;AAAA;AAkBnBD,YAAAA,IAlBmB;AAAA,8CAuBlBA,IAAI,CAACA,IAvBa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXE,WAAW;AAAA;AAAA;AAAA,GAAjB;AA0BP,OAAO,IAAMC,cAAc;AAAA,uEAAG,kBAAOP,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAcC,YAAAA,IAAd,SAAcA,IAAd,EAAoBC,EAApB,SAAoBA,EAApB;AACtBG,YAAAA,KADsB;AAAA;AAAA,mBAkBTP,MAAM,CAACK,OAAP,CAAe,MAAf,EAAuB,UAAvB,EAAmC;AACpDC,cAAAA,IAAI,EAAE;AACJC,gBAAAA,KAAK,EAAEA;AADH;AAD8C,aAAnC,CAlBS;;AAAA;AAkBtBD,YAAAA,IAlBsB;AAAA,8CAuBrBA,IAAI,CAACA,IAvBgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdG,cAAc;AAAA;AAAA;AAAA,GAApB;AA0BP,OAAO,IAAMC,SAAS;AAAA,uEAAG,kBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACJX,MAAM,CAACY,WAAP,CAAmB,MAAnB,EAA2BD,QAA3B,CADI;;AAAA;AACjBL,YAAAA,IADiB;AAAA,8CAEhBA,IAFgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATI,SAAS;AAAA;AAAA;AAAA,GAAf;;;;;;;;;;0BA1EMT,U;0BAsBAO,W;0BA0BAC,c;0BA0BAC,S","sourcesContent":["import React, { useEffect } from 'react';\n// import PropTypes from 'prop-types';\nimport { strapi } from \"../../axios\";\n\nexport const getLogByGq = async (key, { date, id }) => {\n  const data = await strapi.request(\"POST\", \"/graphql\", {\n    data: {\n      query: `\n            query {\n                logs{\n                  position,\n                  head,\n                  count_ls,\n                  start,\n                  end,\n                  command{\n                    name,\n                    id\n                  },\n                }\n              }\n                       \n            `}\n  })\n  return data.data;\n}\nexport const getLogsByGq = async (key, { date, id }) => {\n  const query = `\n  query {\n      logs (where: { start_lte: \"${date}\", end_gte: \"${date}\", command:{ id_gt : ${0} }}, sort:\"id:asc\"){\n        id,\n        position,\n        head,\n        count_ls,\n        start,\n        end,\n        command{\n          name,\n          id\n        },\n      }\n    }\n             \n  `\n  const data = await strapi.request(\"POST\", \"/graphql\", {\n    data: {\n      query: query\n    }\n  })\n  return data.data;\n}\n\nexport const getAllLogsByGq = async (key, { date, id }) => {\n  const query = `\n  query {\n      logs{\n        id,\n        position,\n        head,\n        count_ls,\n        start,\n        end,\n        command{\n          name,\n          id\n        },\n      }\n    }\n             \n  `\n  const data = await strapi.request(\"POST\", \"/graphql\", {\n    data: {\n      query: query\n    }\n  })\n  return data.data;\n}\n\nexport const createLog = async (formData) => {\n  const data = await strapi.createEntry('logs', formData)\n  return data;\n}"]},"metadata":{},"sourceType":"module"}